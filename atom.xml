<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zero Poit</title>
  <subtitle>Learning and sharing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="gywork.github.io/"/>
  <updated>2017-01-11T19:07:47.820Z</updated>
  <id>gywork.github.io/</id>
  
  <author>
    <name>高洋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node原理</title>
    <link href="gywork.github.io/2017/01/10/node%E5%8E%9F%E7%90%86/"/>
    <id>gywork.github.io/2017/01/10/node原理/</id>
    <published>2017-01-10T15:27:57.661Z</published>
    <updated>2017-01-11T19:07:47.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-原理介绍"><a href="#node-原理介绍" class="headerlink" title="node 原理介绍"></a>node 原理介绍</h1><blockquote>
<p>任何程序都没有IO能力,真正的读写文件,操作网络数据的能力都是操作系统提供的(操作系统提供一个操作的api)<br>node所有代码永远都是在主线程上执行的</p>
</blockquote>
<!-- ![node原理图](./images/event-loop.jpg) -->
<p><img src="/images/event-loop.jpg" class="full-image"></p>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul>
<li>每个程序运行的时候都需要一些资源</li>
</ul>
<p>进程: 就是是操作系统资源(内存,网络,cpu占有)分配的最小单位<br>主要作用: 应用程序与应用程序的边界</p>
<ul>
<li><p>计算机发展早期(没有图形界面)时,同一时间只能执行单个程序,进程就是为了解决这个问题</p>
</li>
<li><p>cpu通过时间调度,不同时间片 来处理不同的应用程序(寄存器保存之前程序段的执行状态)(注:不用操作系统不同的调度方式进程执行顺序不同;eg:按时间,按大小,按时间/大小等)</p>
</li>
<li><p>每个程序至少有一个进程,而线程数是不确定的,进程中保存着程序资源,线程可以使用进程中的资源</p>
</li>
<li>线程可以理解成一段代码流,线程就是操作系统CPU切换处理的最小单位,同一个进程中的线程可以访问所属进程中的数据</li>
<li>多线程编程模型的弊端<br>1.切换线程也需要时间<br>2.多线程容易发生资源争抢问题(一般传统的解决方案都是利用锁的方式解决)<br>3.高并发能力不太好(线程占用空间)</li>
</ul>
<h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><ul>
<li>node既可以接收http请求也可以进行处理程序</li>
<li>node并发能力高于apache,稳定性没有apache好,稳定性需要自己进一步处理</li>
<li>node其实不是单线程的,一般node单线程其实是指JS是单线程的,node作为中间层提供了一些api,如读写文件io等</li>
<li>普通js在v8引擎中执行,v8引擎是一个单线程执行的模型</li>
<li>node处理过程<br>1.当请求(request)进来之后,node程序把请求都放在事件队列(evet queue)中,node把普通代码(除了readfile,监听request事件,定时器等)执行完毕,才会处理事件队列中的回调函数(比对js异步执行模型)<br>2.普通代码都是通过 node 主执行线程执行的;<br>直到所有普通代码执行结束了;node 主线程开始开启一个循环(event loop <strong>主线程执行完普通代码继续执行循环</strong>),循环中去不断的提取事件队列中的任务(就是那些异步api),<br>主线程提取到任务之后,node会判断一下,这个任务是否需要进行 IO (文件读写,网络读写 <strong>注意: 只有文件IO ,网络IO, 定时器才会进入到事件队列</strong>),<br>如果是定时器,则在循环线程(主线程)上判断时间到没到,如果到了直接执行,如果没到,再次扔回到事件队列中(定时器执行时千万不要写有大量循环计算的代码,容易造成程序段阻塞)<br>如果是 IO任务 ,主线程会直接在线程池里找一个线程去处理这个任务,当这个线程执行完成之后会把执行结果与错误信息传到回调函数参数中,回调函数会被放入到事件队列中等待循环线程的提取执行,这样就可以通过回调函数处理 IO 结果了;<br>3.循环线程的回调 与 IO 处理线程的回调将会发送给响应(response)或者事件队列目录的任意一个</li>
</ul>
<p>另: </p>
<ol>
<li>非阻塞 IO 指的是,遇到 IO 操作时,利用线程池去执行等待的操作,主线程继续执行事件队列的代码;</li>
<li>事件指的是:放在事件队列中在主线程执行的某个阶段会被触发执行的任务</li>
<li>一定不要再node中写有大量计算的代码,容易造成阻塞</li>
</ol>
<h2 id="三大服务器"><a href="#三大服务器" class="headerlink" title="三大服务器:"></a>三大服务器:</h2><h3 id="Apache-IIS-Tomcat-纯粹的服务器-不处理程序-只是会解析http请求报文-交给后台语言进行处理"><a href="#Apache-IIS-Tomcat-纯粹的服务器-不处理程序-只是会解析http请求报文-交给后台语言进行处理" class="headerlink" title="Apache,IIS,Tomcat(纯粹的服务器,不处理程序,只是会解析http请求报文,交给后台语言进行处理)"></a>Apache,IIS,Tomcat(纯粹的服务器,不处理程序,只是会解析http请求报文,交给后台语言进行处理)</h3><ul>
<li>apache通常和php和java一起使用,apache用来接收http请求,php后台语言用来处理程序</li>
<li>IIS和ASP.NET等配合使用</li>
<li>Tomcat服务器配合java,jsp等使用</li>
</ul>
<h3 id="传统服务器执行过程"><a href="#传统服务器执行过程" class="headerlink" title="传统服务器执行过程"></a>传统服务器执行过程</h3><ul>
<li>传统服务器程序(服务器程序也是程序),当请求进来之后就开启一个线程来处理这个请求</li>
<li>每一个线程至少需要2MB内存空间(以8GB内存为例,同一时刻最多接收4k个请求)</li>
<li>传统的服务器应对高并发能力不太好(问题)</li>
<li>同时java,php等后台语言是多线程的(会利用多线程处理需要占用大量cpu时间的代码,如循环等计算就可以新建一个线程去处理)</li>
<li>多线程语言会通过创建一个新的线程来处理需要大量cpu 事件的代码(需要大量循环计算)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new Thread(()=&gt;&#123;</div><div class="line">  // 执行的代码</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><h3 id="window下不能直接创建一个点开头的文件-eg-txt-不能被创建"><a href="#window下不能直接创建一个点开头的文件-eg-txt-不能被创建" class="headerlink" title="window下不能直接创建一个点开头的文件,eg:.txt  不能被创建"></a>window下不能直接创建一个点开头的文件,eg:.txt  不能被创建</h3><ul>
<li>想要创建,只要在后缀的后面再接一个点就可以了,eg:.txt.<ul>
<li>思考:测试发现在文件后面无论加几个点,在确定后都会消失;</li>
<li>应该是windows在判断文件名时如果只有一个点那么,点之前必须有字符串作为文件名<br>eg: 123.    保存后的文件名为123</li>
<li>如果有多个点,那么<em>最后一个后面跟有字符串的点</em>会被当做后缀名来使用;<br>eg: 1.2….3.4.5…..    保存后的文件名为1.2….3.4.5</li>
<li>如果文件后面有不跟字符串的点将会被忽略<br>eg: 1.txt…..</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;node-原理介绍&quot;&gt;&lt;a href=&quot;#node-原理介绍&quot; class=&quot;headerlink&quot; title=&quot;node 原理介绍&quot;&gt;&lt;/a&gt;node 原理介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;任何程序都没有IO能力,真正的读写文件,操作网络数据的能力
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试页面</title>
    <link href="gywork.github.io/2016/12/02/TEST/"/>
    <id>gywork.github.io/2016/12/02/TEST/</id>
    <published>2016-12-01T16:57:54.833Z</published>
    <updated>2016-12-01T23:42:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片扩大显示测试"><a href="#图片扩大显示测试" class="headerlink" title="图片扩大显示测试"></a>图片扩大显示测试</h2><p><img src="/images/水墨女生.jpg" class="full-image"></p>
<h2 id="背景色测试"><a href="#背景色测试" class="headerlink" title="背景色测试"></a>背景色测试</h2><p><span style="background-color: #9954bb;
font-size: 12px">MarkDown本身是不支持修改字体,字号,与颜色等功能的;</span></p>
<p>CSDN-markdown编辑器是其衍生版本，扩展了Markdown的功能（如表格、脚注、内嵌HTML等等）！</p>

<h2 id="文本居中测试"><a href="#文本居中测试" class="headerlink" title="文本居中测试"></a>文本居中测试</h2><ul>
<li><p>html方式</p>
<blockquote class="blockquote-center">人的一切痛苦,本质上都是对自己无能的愤怒.</blockquote>
</li>
<li><p>标签方式</p>
<blockquote class="blockquote-center"><p>结束标签名前有end!</p>
</blockquote>
</li>
<li><p>标签方式二</p>
<blockquote class="blockquote-center"><p>结束标签名前有end!</p>
</blockquote>
</li>
</ul>
<blockquote class="blockquote-center"><p>用错的方法去验证一个对的答案是一个很愚蠢的行为!</p>
</blockquote>
<h4 id="敢去拼-无所惧"><a href="#敢去拼-无所惧" class="headerlink" title="敢去拼,无所惧"></a>敢去拼,无所惧</h4><h4 id="有实力-无所惧"><a href="#有实力-无所惧" class="headerlink" title="有实力,无所惧"></a>有实力,无所惧</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图片扩大显示测试&quot;&gt;&lt;a href=&quot;#图片扩大显示测试&quot; class=&quot;headerlink&quot; title=&quot;图片扩大显示测试&quot;&gt;&lt;/a&gt;图片扩大显示测试&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/水墨女生.jpg&quot; class=&quot;full-image&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>分类测试</title>
    <link href="gywork.github.io/2016/12/01/categories/"/>
    <id>gywork.github.io/2016/12/01/categories/</id>
    <published>2016-12-01T14:50:01.826Z</published>
    <updated>2016-12-01T19:03:28.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Testing2" scheme="gywork.github.io/categories/Testing2/"/>
    
    
  </entry>
  
  <entry>
    <title>next主题配置</title>
    <link href="gywork.github.io/2016/12/01/next-config/"/>
    <id>gywork.github.io/2016/12/01/next-config/</id>
    <published>2016-12-01T13:39:21.129Z</published>
    <updated>2016-12-01T18:48:22.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h2><p>NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置文件，设定 rss 字段的值：</p>
<ul>
<li><strong>false</strong> : 禁用 RSS，不在页面上显示 RSS 连接。</li>
<li>留空 : 使用 Hexo 生成的 Feed 链接。 你可以需要先安装 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a> 插件。</li>
<li>具体的链接地址 : 适用于已经烧制过 Feed 的情形。</li>
</ul>
<p>具体操作:<br>1.install 安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure></p>
<p>2.Options 选项<br>You can configure this plugin in _config.yml.  你可以在 sourse 路径下_config.yml文件中配置这个插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div><div class="line">  hub:</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="添加「标签」页面"><a href="#添加「标签」页面" class="headerlink" title="添加「标签」页面"></a>添加「标签」页面</h2><p>新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: 标签测试文章</div><div class="line">tags:</div><div class="line">  - Testing</div><div class="line">  - Another Tag</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h4 id="测试tag的用法"><a href="#测试tag的用法" class="headerlink" title="测试tag的用法:"></a>测试tag的用法:</h4><p>标签的作用是当你在不同页面添加了标签名,在菜单标签模块点击标签名的时候就可以访问到所有添加了该标签名的页面了.</p>
<h2 id="添加「分类」页面"><a href="#添加「分类」页面" class="headerlink" title="添加「分类」页面"></a>添加「分类」页面</h2><p>新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。 底下代码是一篇包含分类的文章的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">title: 分类测试文章</div><div class="line">categories: Testing</div><div class="line">---</div></pre></td></tr></table></figure>
<p>ps:如果设置了分类,但是「分类」页面不起作用,可以去sourse/categories目录中的index.md文件中添加类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: categories</div><div class="line">date: 2016-11-29 06:08:17</div><div class="line">type: &quot;categories&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h2 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h2><p>NexT 使用 <span style="color: blue;
e"> Tomorrow Theme </span> 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 <code>normal</code> 主题，可选的值有 <code>normal</code>，<code>night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code>：</p>
<h2 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h2><p>侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 <span style="background-color: #9954bb;
font-size: 12px">主题配置文件</span> 中。</p>
<p>1.链接放置在 <strong>social</strong> 字段下，一行一个链接。其键值格式是 <code>显示文本: 链接地址</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Social links</div><div class="line">social:</div><div class="line">  GitHub: https://github.com/your-user-name</div><div class="line">  Twitter: https://twitter.com/your-user-name</div><div class="line">  微博: http://weibo.com/your-user-name</div><div class="line">  豆瓣: http://douban.com/people/your-user-name</div><div class="line">  知乎: http://www.zhihu.com/people/your-user-name</div><div class="line">  # 等等</div></pre></td></tr></table></figure></p>
<p>2.设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称，<br> 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。<br>  enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  # Social Icons</div><div class="line">social_icons:</div><div class="line">  enable: true</div><div class="line">  # Icon Mappings</div><div class="line">  GitHub: github</div><div class="line">  Twitter: twitter</div><div class="line">  微博: weibo</div></pre></td></tr></table></figure></p>
<h2 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h2><p>  越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 <span style="background-color: #9954bb;
font-size: 12px">主题配置文件</span> 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</div><div class="line">wechatpay: /path/to/wechat-reward-image</div><div class="line">alipay: /path/to/alipay-reward-image</div></pre></td></tr></table></figure></p>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>编辑 <span style="background-color: #9954bb;
font-size: 12px">主题配置文件</span> 添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># title</div><div class="line">links_title: Links</div><div class="line">links:</div><div class="line">  MacTalk: http://macshuo.com/</div><div class="line">  Title: http://example.com/</div></pre></td></tr></table></figure></p>
<p>##　多说评论显示 UA</p>
<p>在每一条多说评论后显示评论者所使用的代理信息（如 操作系统、浏览器）</p>
<p>要启用此功能，需要配置 <code>duoshuo_info</code> 这个字段。 编辑 <span style="background-color: #9954bb;
">主题配置文件</span>，查找 <code>duoshuo_info</code> 字段;</p>
<p>只要设置 <code>ua_enable</code> 为 true 即可显示 UA 信息。 <code>admin_enable</code> 是用于显示 「博主」 文字，表明评论者是博主，此字段需要同时配置 <code>user_id</code> 和 <code>admin_nickname</code> 字段。 访问 <a href="http://dev.duoshuo.com/" target="_blank" rel="external">多说</a>，登录并访问「我的主页」获取 user_id ， 此 ID 是 网址最后那串数字。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">duoshuo_info:</div><div class="line">  ua_enable: true</div><div class="line">  admin_enable: true</div><div class="line">  user_id: 1234567</div><div class="line">  admin_nickname: 我是博主</div></pre></td></tr></table></figure>
<h2 id="腾讯公益404页面"><a href="#腾讯公益404页面" class="headerlink" title="腾讯公益404页面"></a>腾讯公益404页面</h2><p>腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！效果如下 [<a href="http://www.ixirong.com/404.html" target="_blank" rel="external">http://www.ixirong.com/404.html</a>]</p>
<p>使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE HTML&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</div><div class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</div><div class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</div><div class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</div><div class="line">        charset=&quot;utf-8&quot; homePageUrl=&quot;your site url &quot;</div><div class="line">        homePageName=&quot;回到我的主页&quot;&gt;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h2><p>这个时间将在站点的底部显示，例如 © 2013 - 2015。 编辑 <span style="background-color: #9954bb;
">主题配置文件</span>，新增字段 since。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">since: 2013</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设置-RSS&quot;&gt;&lt;a href=&quot;#设置-RSS&quot; class=&quot;headerlink&quot; title=&quot;设置 RSS&quot;&gt;&lt;/a&gt;设置 RSS&lt;/h2&gt;&lt;p&gt;NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置文件，设定 rss 字段的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;false&lt;/strong&gt; : 禁用 RSS，不在页面上显示 RSS 连接。&lt;/li&gt;
&lt;li&gt;留空 : 使用 Hexo 生成的 Feed 链接。 你可以需要先安装 &lt;a href=&quot;https://github.com/hexojs/hexo-generator-feed&quot;&gt;hexo-generator-feed&lt;/a&gt; 插件。&lt;/li&gt;
&lt;li&gt;具体的链接地址 : 适用于已经烧制过 Feed 的情形。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体操作:&lt;br&gt;1.install 安装&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-generator-feed --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.Options 选项&lt;br&gt;You can configure this plugin in _config.yml.  你可以在 sourse 路径下_config.yml文件中配置这个插件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;feed:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  type: atom&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  path: atom.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  limit: 20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  hub:&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Testing" scheme="gywork.github.io/categories/Testing/"/>
    
    
      <category term="next" scheme="gywork.github.io/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo</title>
    <link href="gywork.github.io/2016/11/28/hello-world/"/>
    <id>gywork.github.io/2016/11/28/hello-world/</id>
    <published>2016-11-28T08:25:33.741Z</published>
    <updated>2016-12-01T19:03:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>新博客新起点,如果需要了解Hexo相关的知识与操作,可以访问<a href="https://https://hexo.io/docs/commands.html" target="_blank" rel="external">Hexo</a>,当然也可以在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>中寻找答案.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新博客新起点,如果需要了解Hexo相关的知识与操作,可以访问&lt;a href=&quot;https://https://hexo.io/docs/commands.html&quot;&gt;Hexo&lt;/a&gt;,当然也可以在&lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;中寻找答案.&lt;/p&gt;
    
    </summary>
    
      <category term="Testing1" scheme="gywork.github.io/categories/Testing1/"/>
    
    
      <category term="next" scheme="gywork.github.io/tags/next/"/>
    
  </entry>
  
</feed>
